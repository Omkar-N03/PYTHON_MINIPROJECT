# Generated by Django 5.0.8 on 2025-10-20 18:30

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='The question to ask')),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False')], default='multiple_choice', max_length=20)),
                ('marks', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('option_a', models.CharField(blank=True, default='', max_length=500)),
                ('option_b', models.CharField(blank=True, default='', max_length=500)),
                ('option_c', models.CharField(blank=True, default='', max_length=500)),
                ('option_d', models.CharField(blank=True, default='', max_length=500)),
                ('correct_answer', models.IntegerField(default=0, help_text='0=Option A, 1=Option B, 2=Option C, 3=Option D', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)])),
                ('explanation', models.TextField(blank=True, help_text='Explanation for the correct answer')),
                ('order', models.IntegerField(default=0, help_text='Display order in quiz')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=200)),
                ('category', models.CharField(db_index=True, help_text='Subject category', max_length=100)),
                ('description', models.TextField(blank=True)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20)),
                ('time_limit', models.IntegerField(help_text='Time limit in minutes', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(300)])),
                ('total_marks', models.IntegerField(help_text='Total marks for the quiz', validators=[django.core.validators.MinValueValidator(1)])),
                ('passing_marks', models.IntegerField(blank=True, help_text='Minimum marks to pass', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('archived', 'Archived')], db_index=True, default='active', max_length=20)),
                ('allow_retake', models.BooleanField(default=True, help_text='Allow students to retake quiz')),
                ('max_attempts', models.IntegerField(default=3, help_text='Maximum attempts allowed', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('shuffle_questions', models.BooleanField(default=False, help_text='Randomize question order')),
                ('shuffle_options', models.BooleanField(default=False, help_text='Randomize option order')),
                ('show_correct_answers', models.BooleanField(default=True, help_text='Show correct answers after completion')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Quiz',
                'verbose_name_plural': 'Quizzes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_text', models.CharField(max_length=500)),
                ('is_correct', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='option_set', to='quiz.question')),
            ],
            options={
                'verbose_name': 'Option',
                'verbose_name_plural': 'Options',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='quiz.quiz'),
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('time_spent', models.IntegerField(default=0, help_text='Time spent in seconds')),
                ('score', models.IntegerField(blank=True, help_text='Marks obtained', null=True)),
                ('total_marks', models.IntegerField(default=0, help_text='Total marks for this attempt')),
                ('percentage', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], db_index=True, default='in_progress', max_length=20)),
                ('correct_answers', models.IntegerField(default=0)),
                ('incorrect_answers', models.IntegerField(default=0)),
                ('unanswered', models.IntegerField(default=0)),
                ('passed', models.BooleanField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='quiz.quiz')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Quiz Attempt',
                'verbose_name_plural': 'Quiz Attempts',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('grade', models.CharField(blank=True, help_text='e.g., Grade 10, Year 12', max_length=20)),
                ('school', models.CharField(blank=True, max_length=200)),
                ('bio', models.TextField(blank=True, help_text='Tell us about yourself')),
                ('enrollment_date', models.DateField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_option', models.IntegerField(default=0, help_text='Selected option index (0-3)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)])),
                ('is_correct', models.BooleanField(default=False)),
                ('is_flagged', models.BooleanField(default=False, help_text='Question flagged for review')),
                ('time_taken', models.IntegerField(default=0, help_text='Time taken to answer in seconds')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='quiz.quizattempt')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.question')),
            ],
            options={
                'verbose_name': 'Student Answer',
                'verbose_name_plural': 'Student Answers',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('qualification', models.CharField(blank=True, help_text='e.g., M.Sc., Ph.D.', max_length=100)),
                ('specialization', models.CharField(blank=True, help_text='e.g., Mathematics, Physics', max_length=100)),
                ('years_experience', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('institution', models.CharField(blank=True, max_length=200)),
                ('bio', models.TextField(blank=True, help_text='Brief description about yourself')),
                ('subjects', models.CharField(blank=True, help_text='Comma-separated subjects', max_length=200)),
                ('is_approved', models.BooleanField(default=True)),
                ('language', models.CharField(choices=[('en', 'English'), ('es', 'Spanish'), ('fr', 'French'), ('de', 'German'), ('hi', 'Hindi')], default='en', max_length=10)),
                ('timezone_field', models.CharField(default='Asia/Kolkata', max_length=50)),
                ('email_notifications', models.CharField(choices=[('all', 'All Notifications'), ('important', 'Important Only'), ('none', 'None')], default='all', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='quiz',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='quiz.teacher'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('teacher', 'Teacher'), ('student', 'Student')], max_length=10)),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('bio', models.TextField(blank=True)),
                ('avatar', models.CharField(default='👨\u200d🎓', max_length=10)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['quiz', 'order'], name='quiz_questi_quiz_id_f13328_idx'),
        ),
        migrations.AddIndex(
            model_name='quizattempt',
            index=models.Index(fields=['-start_time', 'status'], name='quiz_quizat_start_t_dcc9be_idx'),
        ),
        migrations.AddIndex(
            model_name='quizattempt',
            index=models.Index(fields=['student', 'quiz'], name='quiz_quizat_student_360a21_idx'),
        ),
        migrations.AddIndex(
            model_name='studentanswer',
            index=models.Index(fields=['attempt', 'question'], name='quiz_studen_attempt_30516b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='studentanswer',
            unique_together={('attempt', 'question')},
        ),
        migrations.AddIndex(
            model_name='quiz',
            index=models.Index(fields=['-created_at', 'status'], name='quiz_quiz_created_f537cb_idx'),
        ),
        migrations.AddIndex(
            model_name='quiz',
            index=models.Index(fields=['category', 'difficulty'], name='quiz_quiz_categor_2e1a69_idx'),
        ),
    ]
